# -*- coding: utf-8 -*-
"""superstore.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Jk58JDkcCgQue8NW0EuDiMnWJpZ1jo_2
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv('SampleSuperstore.csv')

# Display basic information about the dataset
print(data.info())

# Display summary statistics of numerical columns
print(data.describe())

# Check for missing values
print(data.isnull().sum())

# Explore the distribution of categorical variables
plt.figure(figsize=(12, 6))
sns.countplot(data=data, x='Ship Mode', hue='Segment')
plt.title('Distribution of Ship Modes by Customer Segment')
plt.show()

plt.figure(figsize=(12, 6))
sns.countplot(data=data, x='Category', hue='Segment')
plt.title('Distribution of Categories by Customer Segment')
plt.show()

# Explore the relationship between variables using more complex scatter plots
plt.figure(figsize=(12, 8))
sns.scatterplot(data=data, x='Sales', y='Profit', hue='Region', size='Quantity', palette='viridis')
plt.title('Sales vs Profit by Region (Size by Quantity)')
plt.show()

# Explore the distribution of numerical variables using KDE plots
plt.figure(figsize=(10, 6))
sns.kdeplot(data=data['Sales'], label='Sales', shade=True)
sns.kdeplot(data=data['Profit'], label='Profit', shade=True)
plt.xlabel('Amount')
plt.title('Kernel Density Estimation (KDE) of Sales and Profit')
plt.legend()
plt.show()

# Explore the relationship between numerical and categorical variables using box plots
plt.figure(figsize=(12, 6))
sns.boxplot(data=data, x='Category', y='Profit')
plt.title('Profit Distribution by Category')
plt.show()

plt.figure(figsize=(12, 6))
sns.boxplot(data=data, x='Region', y='Sales')
plt.title('Sales Distribution by Region')
plt.show()

# Explore the top-selling products and their sales
top_selling_products = data.groupby('Sub-Category')['Sales'].sum().sort_values(ascending=False).head(10)
plt.figure(figsize=(12, 6))
sns.barplot(x=top_selling_products.index, y=top_selling_products.values, palette='magma')
plt.xlabel('Product Sub-Category')
plt.ylabel('Total Sales')
plt.title('Top 10 Selling Products')
plt.xticks(rotation=45)
plt.show()

# Explore the most profitable products and their profit
most_profitable_products = data.groupby('Sub-Category')['Profit'].sum().sort_values(ascending=False).head(10)
plt.figure(figsize=(12, 6))
sns.barplot(x=most_profitable_products.index, y=most_profitable_products.values, palette='coolwarm')
plt.xlabel('Product Sub-Category')
plt.ylabel('Total Profit')
plt.title('Top 10 Most Profitable Products')
plt.xticks(rotation=45)
plt.show()

# Explore the relationship between profit and discount
plt.figure(figsize=(10, 6))
sns.scatterplot(data=data, x='Discount', y='Profit', hue='Category', palette='Set2')
plt.title('Profit vs Discount by Category')
plt.show()

# Explore the distribution of categorical variables
plt.figure(figsize=(10, 6))
sns.countplot(data=data, x='Ship Mode')
plt.title('Distribution of Ship Modes')
plt.show()

plt.figure(figsize=(10, 6))
sns.countplot(data=data, x='Segment')
plt.title('Distribution of Customer Segments')
plt.show()

plt.figure(figsize=(10, 6))
sns.countplot(data=data, x='Category')
plt.title('Distribution of Product Categories')
plt.show()

# Explore the relationship between variables using scatter plots or other appropriate plots
plt.figure(figsize=(10, 6))
sns.scatterplot(data=data, x='Sales', y='Profit', hue='Category')
plt.title('Sales vs Profit by Category')
plt.show()

# Explore the distribution of numerical variables using histograms or other appropriate plots
plt.figure(figsize=(10, 6))
sns.histplot(data=data, x='Sales', bins=20)
plt.title('Sales Distribution')
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(data=data, x='Profit', bins=20)
plt.title('Profit Distribution')
plt.show()

# Explore the relationship between categorical variables using count plots or other appropriate plots
plt.figure(figsize=(12, 6))
sns.countplot(data=data, x='Category', hue='Region')
plt.title('Count of Categories by Region')
plt.show()

# Explore the correlation between numerical variables using a heatmap
correlation_matrix = data.corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()